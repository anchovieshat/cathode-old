#!/bin/sh

OUTFILE=build.ninja

msg() {
	echo "configure: $1"
}

err() {
	msg "error: $1"
	exit 1
}

need_cmd() {
	if command -v $1 >/dev/null 2>&1
	then msg "found $1"
	else err "need $1"
	fi
}

need_rustlib() {
	if [ ! -d "$RUST_PATH/src/lib$1" ]
	then err "need lib$1 (did you give the path to Rust?)"
	fi
	if [ ! -d "lib/lib$1" ]; then
		rm -f "lib/lib$1"
		ln -s "$RUST_PATH/src/lib$1" "lib/lib$1"
	fi
}

write_build() {
	echo "$1" >> $OUTFILE
}

define_rule() {
	write_build "rule $1"; shift
	write_build "  description = $1"; shift
	write_build "  command = $1"; shift
	[ -n "$1" ] && write_build "  depfile = $1"; [ "$#" -gt 0 ] && shift
	while [ "$#" -gt 0 ] && [ -n "$1" ]; do
		write_build "  $1"; shift
	done
	write_build ""
}

set_var() {
	write_build "$1 = $2"
}

target() {
	_target=$1; shift
	_rule=$1; shift
	_srcs=$1; [ "$#" -gt 0 ] && shift
	write_build "build \$builddir/$_target: $_rule $_srcs"
	while [ "$#" -gt 0 ] && [ -n "$1" ]; do
		write_build "  $1"; shift
	done
}

target_sources() {
	var=$1; shift
	target=$1; shift
	rule=$1; shift;
	sources=$(ls $1); shift
	for src in $sources; do
		base=`basename $src`
		base_noext=`echo $base | awk -F. '{print $1;}'`
		eval "$var=\"\$$var \\\$builddir/$target\""
		target `eval echo $target` "$rule" "$src" "$@"
	done
}

default_target() {
	write_build "default \$builddir/$1"
}

valopt() {
	VAL_OPTS="$VAL_OPTS $1";
	local opt=$1; shift
	local default=$1; shift
	local doc="$*"
	if [ $HELP -eq 0 ]; then
		local uopt=`echo $opt | tr '[:lower:]' '[:upper:]' | tr '\-' '\_'`
		eval $uopt="$default"
		for arg in $ARGS; do
			if echo "$arg" | grep -q -- "--$opt="; then
				val=`echo "$arg" | cut -f2 -d=`
				eval $uopt="$val"
			fi
		done
	else
		opt="$opt=[$default]"
		printf "\t --%s %s\n" "$opt" "$doc"
	fi
}

validate_args() {
	for arg in $ARGS; do
		is_valid=0
		for opt in $VAL_OPTS; do
			if echo "$arg" | grep -q -- "--$opt="; then
				is_valid=1
			fi
		done
		if [ "$arg" = "--help" ]; then
			break
		else
			if [ $is_valid -eq 0 ]; then
				err "option '$arg' not recognized"
			fi
		fi
	done
}

HELP=0
ARGS="$@"

msg "looking for build programs"

need_cmd "rustc"
need_cmd "yasm"
need_cmd "clang"
need_cmd "ld.gold"
need_cmd "objcopy"
need_cmd "dd"
need_cmd "parted"
need_cmd "mformat"
need_cmd "mcopy"
need_cmd "mmd"

if [ "$1" = "--help" ]; then
	HELP=1
fi

valopt 'rust-path' '../rust' 'Path to Rust source'
valopt 'build-dir' 'build' 'Path to build directory'

if [ $HELP -eq 1 ]; then
	exit 0
fi

msg "checking configure arguments"

validate_args

msg "checking rust path"
RUST_PATH=`realpath $RUST_PATH`

need_rustlib "core"
need_rustlib "unicode"
need_rustlib "alloc"
need_rustlib "collections"

: > $OUTFILE

set_var "configure_args" "$ARGS"

write_build ""

set_var "builddir" "$BUILD_DIR"
set_var "outdir" '$builddir'
set_var "rustc" "rustc"
set_var "as" "yasm"
set_var "cc" "clang"
set_var "ld" "ld.gold"
set_var "objcopy" "objcopy"
set_var "rust_env" ""
set_var "rustcflags" ""
set_var "asflags" "-felf64 -w -mamd64"
set_var "ldflags" ""

write_build ""

define_rule "configure" "CONFIGURE" './configure $configure_args' '' 'generator=1'
define_rule "rustc" 'RUSTC $out' "\$rustenv \$rustc \$in \$rustcflags --out-dir \$outdir" '$dep'
define_rule "cc" 'CC $out' '$cc $cflags -MMD -MT $out -MF $out.d -c -o $out $in' '$out.d'
define_rule "as" 'AS $out' '$as $asflags -o $out $in'
define_rule "ld" 'LD $out' '$ld $ldflags -o $out $in'
define_rule "objcopy" 'OBJCOPY $out' '$objcopy $objcopyflags $in $out'
define_rule "build_disk" "BUILD_DISK" './build_disk.sh $builddir'

target 'lib/libcore.rlib' 'rustc' 'lib/libcore/lib.rs | lib/x86_64-unknown-kernel.json' 'rustcflags = --target x86_64-unknown-kernel --emit link,dep-info --crate-type rlib -O' 'dep=$builddir/lib/core.d' 'outdir=$builddir/lib' 'rustenv = RUST_TARGET_PATH=lib'
target 'lib/libunicode.rlib' 'rustc' 'lib/libunicode/lib.rs | $builddir/lib/libcore.rlib lib/x86_64-unknown-kernel.json' 'rustcflags = --target x86_64-unknown-kernel --emit link,dep-info --crate-type rlib -O -L $builddir/lib' 'dep=$builddir/lib/unicode.d' 'outdir=$builddir/lib' 'rustenv = RUST_TARGET_PATH=lib'
target 'lib/liballoc.rlib' 'rustc' 'lib/liballoc/lib.rs | $builddir/lib/libcore.rlib lib/x86_64-unknown-kernel.json' 'rustcflags = --target x86_64-unknown-kernel --emit link,dep-info --crate-type rlib -O -L $builddir/lib --cfg feature="\"external_funcs\""' 'dep=$builddir/lib/alloc.d' 'outdir=$builddir/lib' 'rustenv = RUST_TARGET_PATH=lib'
target 'lib/libcollections.rlib' 'rustc' 'lib/libcollections/lib.rs | $builddir/lib/libcore.rlib $builddir/lib/libunicode.rlib $builddir/lib/liballoc.rlib lib/x86_64-unknown-kernel.json' 'rustcflags = --target x86_64-unknown-kernel --emit link,dep-info --crate-type rlib -O -L $builddir/lib' 'dep=$builddir/lib/collections.d' 'outdir=$builddir/lib' 'rustenv = RUST_TARGET_PATH=lib'

target 'kernel/kernel.o' 'rustc' 'kernel/src/main.rs | $builddir/lib/libcore.rlib lib/x86_64-unknown-kernel.json' 'rustcflags = --emit obj,dep-info -C lto -O -L $builddir/lib --target x86_64-unknown-kernel' 'dep=$builddir/kernel/kernel.d' 'outdir=$builddir/kernel' 'rustenv = RUST_TARGET_PATH=lib'
target_sources 'KERN_ASM_OBJS' 'kernel/$base_noext.o' 'as' 'kernel/src/*.asm'
target 'kernel/kernel' 'ld' " $KERN_ASM_OBJS \$builddir/kernel/kernel.o \$builddir/lib/libcore.rlib | kernel/kernel.ld" 'ldflags=-O1 --gc-sections -nostdlib -Bsymbolic -z defs -T kernel/kernel.ld'

target 'boot/boot.o' 'rustc' 'boot/src/main.rs | $builddir/lib/libcore.rlib $builddir/lib/libunicode.rlib $builddir/lib/liballoc.rlib $builddir/lib/libcollections.rlib lib/x86_64-unknown-kernel.json' 'rustcflags = --emit obj,dep-info -C lto -O -L $builddir/lib --target x86_64-unknown-kernel' 'dep=$builddir/boot/boot.d' 'outdir=$builddir/boot' 'rustenv = RUST_TARGET_PATH=lib'
target_sources 'BOOT_ASM_OBJS' 'boot/$base_noext.o' 'as' 'boot/src/*.asm'
target 'boot/boot.elf' 'ld' "\$builddir/boot/boot.o $BOOT_ASM_OBJS" 'ldflags = -O1 --no-gc-sections -nostdlib -znocombreloc -Bsymbolic -shared -T boot/efi.ld'
target 'boot/boot.efi' 'objcopy' '$builddir/boot/boot.elf' 'objcopyflags = -j .text -j .sdata -j .data -j .dynamic -j .dynsym -j .rel.dyn -j .rela.dyn -j .reloc -j .eh_frame --output-target efi-app-x86_64'

target 'disk.img' 'build_disk' ' | $builddir/boot/boot.efi $builddir/kernel/kernel build_disk.sh'

write_build 'build build.ninja: configure | configure'

default_target 'kernel/kernel'
default_target 'boot/boot.efi'

write_build 'build disk: phony $builddir/disk.img'

msg "wrote build.ninja"
